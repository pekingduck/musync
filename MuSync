#!/usr/local/bin/python3.4 -u

from PyQt5 import QtCore, QtGui, QtWidgets
import os, sys
import musyncwidget
import configparser
import music.selection
import music.flac
import music.itunes
import subprocess
import time
import io
import re

expusr = os.path.expanduser

class MusyncGUI(QtWidgets.QWidget):
  next_step = QtCore.pyqtSignal(str, str, str)
  device_selected = QtCore.pyqtSignal(str)

  def __init__(self, app_obj):
    super(MusyncGUI, self).__init__(None)
    self.app = app_obj

    self.ui = musyncwidget.Ui_MusyncWidget()
    self.ui.setupUi(self)
    self.ui.libraryCB.addItem("<Please pick one>")
    self.ui.libraryCB.addItems(self.app.available_libs)
    self.ui.libraryCB.setFocus(True)
    self.ui.progressBar.setMinimum(0)
    self.ui.progressBar.setMaximum(100)
    self.ui.progressBar.setValue(0)
    #self.ui.progressBar.setHidden(False)
    #self.ui.progressBar.setHidden(True)
    #self.ui.progressLab.setHidden(True)
    
    self.ui.libraryCB.activated[str].connect(self.library_selected)
    self.ui.deviceCB.activated[str].connect(self.device_selected)
    self.ui.locationEdit.textChanged.connect(self.location_edited)
    self.ui.chooseButton.clicked.connect(self.choose_clicked)
    self.ui.cancelButton.clicked.connect(self.close)
    self.ui.deleteButton.clicked.connect(self.delete_device)
    self.ui.nextButton.clicked.connect(self.select_and_sync)
    self.ui.deviceCB.currentTextChanged.connect(self.device_check)
    self.ui.playlistCB.addItem("dir")
    self.ui.playlistCB.addItem("m3u8")
    
  def device_check(self, text):
    status = False
    if text:
      status = True
    self.ui.deleteButton.setEnabled(status)

  def delete_device(self):
    dev_name = self.ui.deviceCB.currentText()
    dev_idx = self.ui.deviceCB.currentIndex()
    if self.sdb.has_device(dev_name):
      self.sdb.del_device(dev_name)
      self.sdb.save()
    self.ui.deviceCB.removeItem(dev_idx)

  def append_log(self, txt):
    #self.ui.logEdit.insertPlainText(txt)
    self.ui.logEdit.setPlainText(txt)
    self.ui.logEdit.ensureCursorVisible()

  def choose_clicked(self):
    loc = QtWidgets.QFileDialog.getExistingDirectory(self, 
                                                     "Open Device", "/Volumes")
    if loc:
      self.ui.locationEdit.setText(loc)
      self.validate_input()

  def location_edited(self):
    self.validate_input()

  def validate_input(self):
    is_valid = False
    loc = expusr(self.ui.locationEdit.text())
    if (loc and 
        os.access(loc, os.W_OK) and 
        self.ui.libraryCB.currentIndex() and 
        len(self.ui.deviceCB.currentText())):
      is_valid = True
    self.ui.nextButton.setEnabled(is_valid)

  def enable(self, enabled):
    for w in [ "nextButton", "cancelButton", "locationEdit", "libraryCB",
               "deviceCB", "chooseButton", "deleteButton" ]:
      self.ui.__dict__[w].setEnabled(enabled)

  def library_selected(self, lib):
    self.sdb = self.app.get_select_db(lib)
    dev_list = self.sdb.devices()
    self.ui.deviceCB.clear()
    if len(dev_list):
      self.ui.deviceCB.addItems(dev_list)
      self.device_selected(dev_list[0])
    else:
      self.ui.locationEdit.setText("")

  def device_selected(self, name):
    if self.sdb.has_device(name):
      dev = self.sdb.get_device(name)
      self.ui.locationEdit.setText(dev.location)
      self.ui.deleteButton.setEnabled(True)
      i = self.ui.playlistCB.findText(dev.pl_type)
      self.ui.playlistCB.setCurrentIndex(i)
      self.ui.playlistCB.setEnabled(False)
    else:
      self.ui.locationEdit.setText("")
      self.ui.playlistCB.setEnabled(True)
      
  # let QT redraws widgets and processes other things (except user inputs)
  # during extended operations
  def process_events(self):
    QtWidgets.QApplication.processEvents(
      QtCore.QEventLoop.ExcludeUserInputEvents) 

  def select_and_sync(self):
    self.enable(False)   # grey out some controls

    dest = expusr(self.ui.locationEdit.text())
    dev_name = self.ui.deviceCB.currentText()
    device = self.sdb.add_device(dev_name, dest, self.ui.playlistCB.currentText())

    # launch playlist selector
    size_hash = {}
    f = self.app.select(self.ui.libraryCB.currentText(),
                        device, size_hash,
                        self.process_events)
    
    # merge user selection with existing data
    device.merge_stream(f.stdout)

    sync_type = self.ui.playlistCB.currentText()
    
    # delete playlists (both entries in the DB and the files)
    # which the user just unselected
    num_deleted = device.delete_playlists(dest, sync_type)
    self.sdb.save_device(device)
    self.sdb.save()
    self.append_log("{} playlists deleted\n".format(num_deleted))


    lib_name = self.ui.libraryCB.currentText()

    for progress, file_name in device.sync(sync_type,
                              self.app.staging_dir(lib_name),
                              dest,
                              self.process_events):
      self.append_log("Copying {}...\n".format(file_name))
      self.ui.progressBar.setValue(progress)


    self.append_log("100% Finished")

    msg_box = QtWidgets.QMessageBox()
    msg_box.setText("Your device has been synced")
    msg_box.exec()
    self.close()
    
class MusyncApp(QtCore.QObject):
  class_map = { "iTunes" : music.itunes.Library, "FLAC" : music.flac.Library }
  
  def __init__(self):
    super(MusyncApp, self).__init__(None)
    self.config = configparser.ConfigParser()
    self.config.read(expusr("~/.music.cfg"))
    self.available_libs = self.config["MAIN"]["LIBRARIES"].split(",")

  def get_select_db(self, lib):
    self.lib_type = self.config[lib]["TYPE"]
    if self.lib_type in self.class_map:
      db_file = self.config[lib]["SelectDBFile"]
      return music.selection.DB(expusr(db_file))

  def select(self, lib_name, device, size_hash, event_cb):
    db_file = expusr(self.config[lib_name]["DBFile"])
    lib = self.class_map[self.lib_type](db_file)
    # FIXME: shouldn't hardcode the path to the executable!!!
    proc = subprocess.Popen([ "/Users/gordonlo/bin/treeselector", "-u", "G", "-t", 
                              "Musync - {}".format(lib_name) ], 
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                            universal_newlines=True)
    for pl in lib.playlists():
      l = "{}\t{}\t{}\n".format(pl.path, device.get(pl.path), pl.size)
      size_hash[os.path.join("Music", "Lib1", pl.path)] = pl.size
      proc.stdin.write(l)
      event_cb()
      
    # SecondLib
    try:
      lib_name2 = expusr(self.config[lib_name]["SecondLib"])
      lib2_regex = self.config[lib_name]["SecondLibPlaylistRegex"]
      db_file2 = expusr(self.config[lib_name2]["DBFile"])
      lib2 = self.class_map[self.config[lib_name2]["TYPE"]](db_file2)
      rx = re.compile(lib2_regex)
      
      for pl in lib2.playlists():
        if re.search(rx, pl.path):
          l = "{}\t{}\t{}\n".format(pl.path, device.get(pl.path), pl.size)
          proc.stdin.write(l)
          size_hash[os.path.join("Music", "Lib2", pl.path)] = pl.size
        event_cb()
    except:
      pass
    
    proc.stdin.close()
    return proc

  def staging_dir(self, lib_name):
    return expusr(self.config[lib_name]["StagingDir"])

if __name__ == "__main__":
  app = QtWidgets.QApplication(sys.argv)
  mapp = MusyncApp()
  gui = MusyncGUI(mapp)
  gui.show()
  sys.exit(app.exec_())
